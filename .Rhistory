setwd("~/Documents/GitHub/Mice-Protein-Expression")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
theme_linedraw() +
labs(title = "Count of Each Class")
library(tidyverse)
data <- read.csv("data.csv")
data
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
theme_linedraw() +
labs(title = "Count of Each Class")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
theme_linedraw() +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
theme_minimal() +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_manual(values = c("#FF6666", "#FF4D4D", "#FF3333", "#FF1A1A", "#FF0000")) +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey(start = 0.8, end = 0.2) +
theme_minimal() +) +
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey(start = 0.8, end = 0.2) +
theme_minimal() +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey(start = 1, end = 0.1) +
theme_minimal() +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey(start = 1, end = 0.2) +
theme_minimal() +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey(start = 0.9, end = 0.2) +
theme_minimal() +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_bluey(start = 0.9, end = 0.2) +
theme_minimal() +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_blue(start = 0.9, end = 0.2) +
theme_minimal() +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_color_brewer(palette="blues")+
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_color_brewer(palette="blue"")+
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey(start = 0.9, end = 0.2) +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_blues(start = 0.9, end = 0.2) +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.9, end = 0.2) +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.8, end = 0.2) +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.8, end = 0.2) +
labs(title = "Number of Classes")
theme(plot.title = element_text(hjust = 0.5)) +
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.8, end = 0.2) +
labs(title = "Number of Classes")
theme(plot.title = element_text(hjust = 0.5))
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.8, end = 0.2) +
labs(title = "Number of Classes")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.8, end = 0.2) +
labs(title = "Number of Classes", x = "Count number")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.8, end = 0.2) +
labs(title = "Number of Classes", y = "Count number")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.8, end = 0.2) +
labs(title = "Number of Classes", y = "Count")
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.8, end = 0.2) +
labs(title = "Number of Classes", y = "Count", x="Class")
missing_values <- data %>%
setNames(gsub("_N", "", names(.))) %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "{.col}")) %>%
pivot_longer(everything(), names_to = "key", values_to = "missing") %>%
mutate(
total = nrow(data),
pct = (missing / total) * 100,
isna = missing > 0
) %>%
filter(isna) %>%
arrange(desc(pct))
percentage.plot <- missing_values %>%
ggplot(aes(x = reorder(key, pct), y = pct)) +
geom_bar(stat = 'identity', fill = 'darkred', alpha = 1) +
scale_x_discrete(limits = missing_values$key) +
coord_flip() +
labs(title = "Missing Values In the Dataset", x = 'Protein Name', y = "Percentage of Missing Values") +
theme(plot.title = element_text(hjust = 0.5)) +
guides(fill = "none")
percentage.plot
Data <- Data %>%
group_by(class) %>%
mutate_each(funs(replace(., which(is.na(.)), mean(., na.rm=TRUE)))) %>%
as.data.frame()
data <- data %>%
group_by(class) %>%
mutate_each(funs(replace(., which(is.na(.)), mean(., na.rm=TRUE)))) %>%
as.data.frame()
dplyr::last_dplyr_warnings()
?funs
?list
data <- data %>%
group_by(class) %>%
mutate(across(everything(), ~ replace(., is.na(.), mean(., na.rm = TRUE)))) %>%
as.data.frame()
data <- data %>%
group_by(class) %>%
mutate(across(everything(), ~ replace(., is.na(.), mean(., na.rm = TRUE)))) %>%
as.data.frame()
proteins <- names(data[2:78])
classes <- as.vector(unique(as.character(data$class)))
missing_values <- data %>%
setNames(gsub("_N", "", names(.))) %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "{.col}")) %>%
pivot_longer(everything(), names_to = "key", values_to = "missing") %>%
mutate(
total = nrow(data),
pct = (missing / total) * 100,
isna = missing > 0
) %>%
filter(isna) %>%
arrange(desc(pct))
percentage.plot <- missing_values %>%
ggplot(aes(x = reorder(key, pct), y = pct)) +
geom_bar(stat = 'identity', fill = 'darkred', alpha = 1) +
scale_x_discrete(limits = missing_values$key) +
coord_flip() +
labs(title = "Missing Values In the Dataset", x = 'Protein Name', y = "Percentage of Missing Values") +
theme(plot.title = element_text(hjust = 0.5)) +
guides(fill = "none")
percentage.plot
library(tidyverse)
data <- read.csv("data.csv")
data
ggplot(data, aes(class)) +
geom_bar(aes(fill = class), alpha = 0.8) +
scale_fill_grey (start = 0.8, end = 0.2) +
labs(title = "Number of Classes", y = "Count", x="Class")
missing_values <- data %>%
setNames(gsub("_N", "", names(.))) %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "{.col}")) %>%
pivot_longer(everything(), names_to = "key", values_to = "missing") %>%
mutate(
total = nrow(data),
pct = (missing / total) * 100,
isna = missing > 0
) %>%
filter(isna) %>%
arrange(desc(pct))
percentage.plot <- missing_values %>%
ggplot(aes(x = reorder(key, pct), y = pct)) +
geom_bar(stat = 'identity', fill = 'darkred', alpha = 1) +
scale_x_discrete(limits = missing_values$key) +
coord_flip() +
labs(title = "Missing Values In the Dataset", x = 'Protein Name', y = "Percentage of Missing Values") +
theme(plot.title = element_text(hjust = 0.5)) +
guides(fill = "none")
percentage.plot
data <- data %>%
group_by(class) %>%
mutate(across(everything(), ~ replace(., is.na(.), mean(., na.rm = TRUE)))) %>%
as.data.frame()
proteins <- names(data[2:78])
classes <- as.vector(unique(as.character(data$class)))
missing_values2 <- data %>%
missing_values2
sum(is.na(data))
sum(is.na(data))
gg_miss_var(data)
for(i in 1:length(proteins)){
plot <- ggplot(data, aes(eval(parse(text = proteins[i])))) +
geom_histogram(aes(fill=..count..), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low="green", high="red") +
labs(title = proteins[i],
x = "Expression Level",
y = "Count") +
theme_light()
cat("#### ", proteins[i], "\n")
print(plot)
cat('\n\n')
}
for(i in 1:length(proteins)){
plot <- ggplot(data, aes(eval(parse(text = proteins[i])))) +
geom_histogram(aes(fill=..count..), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low="green", high="red") +
labs(title = proteins[i],
x = "Expression Level",
y = "Count") +
theme_minimal()
cat("#### ", proteins[i], "\n")
print(plot)
cat('\n\n')
}
data <- data %>%
group_by(class) %>%
mutate(across(everything(), ~ replace(., is.na(.), mean(., na.rm = TRUE)))) %>%
as.data.frame()
proteins <- names(data[2:78])
classes <- as.vector(unique(as.character(data$class)))
data <- data %>%
group_by(class) %>%
mutate(across(everything(), ~ replace(., is.na(.), mean(., na.rm = TRUE)))) %>%
as.data.frame()
proteins <- names(data[2:78])
classes <- as.vector(unique(as.character(data$class)))
for(i in 1:length(proteins)){
plot <- ggplot(data, aes(eval(parse(text = proteins[i])))) +
geom_histogram(aes(fill = after_stat(count)), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low = "green", high = "red") +
labs(title = proteins[i],
x = "Expression Level",
y = "Count") +
theme_minimal()
cat("#### ", proteins[i], "\n")
print(plot)
cat('\n\n')
for(i in 1:length(proteins)){
plot <- ggplot(data, aes(eval(parse(text = proteins[i])))) +
geom_histogram(aes(fill = after_stat(count)), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low = "green", high = "red") +
labs(title = proteins[i],
x = "Expression Level",
y = "Count") +
theme_minimal()
cat("#### ", proteins[i], "\n")
print(plot)
cat('\n\n')
}
View(data)
View(missing_values)
data <- data %>%
group_by(class) %>%
mutate(across(everything(), ~ replace(., is.na(.), mean(., na.rm = TRUE)))) %>%
as.data.frame()
setNames(gsub("_N", "", names(.))) %>%
proteins <- names(data[2:78])
data <- data %>%
group_by(class) %>%
mutate(across(everything(), ~ replace(., is.na(.), mean(., na.rm = TRUE)))) %>%
as.data.frame()
names(data) <- gsub("_N", "", names(data))
proteins <- names(data[2:78])
classes <- as.vector(unique(as.character(data$class)))
for(i in 1:length(proteins)){
plot <- ggplot(data, aes(eval(parse(text = proteins[i])))) +
geom_histogram(aes(fill = after_stat(count)), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low = "green", high = "red") +
labs(title = proteins[i],
x = "Expression Level",
y = "Count") +
theme_minimal()
cat("#### ", proteins[i], "\n")
print(plot)
cat('\n\n')
}
for(i in 1:length(proteins)){
plot <- ggplot(data, aes(eval(parse(text = proteins[i])))) +
geom_histogram(aes(fill = after_stat(count)), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low = "green", high = "red") +
labs(title = proteins[i],
x = "Expression Level",
y = "Count") +
theme_minimal()
cat("#### ", proteins[i], "\n")
print(plot)
cat('\n\n')
}
ggplot(Data, aes(x = eval(parse(text = proteins[1])))) +
geom_histogram(aes(fill=..count..), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low="green", high="red") +
labs(title = proteins[1],
x = "Expression Level",
y = "Count")
for(i in 1:length(proteins)){
plot <- ggplot(data, aes(eval(parse(text = proteins[i])))) +
geom_histogram(aes(fill = after_stat(count)), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low = "green", high = "red") +
labs(title = proteins[i],
x = "Expression Level",
y = "Count") +
theme_minimal()
cat("#### ", proteins[i], "\n")
print(plot)
cat('\n\n')
}
ggplot(data, aes(x = eval(parse(text = proteins[1])))) +
geom_histogram(aes(fill=..count..), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low="green", high="red") +
labs(title = proteins[1],
x = "Expression Level",
y = "Count")
for(i in 1:length(proteins)){
plot <- ggplot(data, aes(eval(parse(text = proteins[i])))) +
geom_histogram(aes(fill = after_stat(count)), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low = "blue", high = "red") +
labs(title = proteins[i],
x = "Expression Level",
y = "Count") +
theme_minimal()
cat("#### ", proteins[i], "\n")
print(plot)
cat('\n\n')
}
for(i in 1:length(proteins)){
cat("#### ", proteins[i], "{.tabset .tabset-pills}\n")
plot <- ggplot(data, aes(eval(parse(text = proteins[i])))) +
geom_histogram(aes(fill = after_stat(count)), color = "black", alpha = 0.5) +
scale_fill_gradient("Count", low = "blue", high = "red") +
labs(title = proteins[i],
x = "Expression Level",
y = "Count") +
theme_minimal()
print(plot)
cat('\n\n')
}
